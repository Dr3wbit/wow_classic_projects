# Generated by Django 2.2.4 on 2019-08-01 18:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import home.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', home.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Consume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='Crafted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.PositiveSmallIntegerField(default=1)),
                ('end_game', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image_name', models.CharField(max_length=50)),
                ('rarity', models.CharField(choices=[('junk', 'junk'), ('common', 'common'), ('uncommon', 'uncommon'), ('rare', 'rare'), ('epic', 'epic'), ('legendary', 'legendary')], default='common', max_length=10)),
                ('unique', models.BooleanField(default=False)),
                ('bop', models.BooleanField(default=False)),
                ('use', models.CharField(blank=True, max_length=250)),
                ('proper_name', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=250)),
                ('category', models.CharField(choices=[('gathered', 'gathered'), ('drop', 'drop'), ('quest', 'quest'), ('crafted', 'crafted'), ('vendor', 'vendor'), ('other', 'other')], default='drop', max_length=15)),
                ('required_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(60)])),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('alchemy', 'alchemy'), ('blacksmithing', 'blacksmithing'), ('cooking', 'cooking'), ('enchanting', 'enchanting'), ('engineering', 'engineering'), ('leatherworking', 'leatherworking'), ('first_aid', 'first_aid'), ('skinning', 'skinning'), ('fishing', 'fishing'), ('herbalism', 'herbalism'), ('mining', 'mining'), ('tailoring', 'tailoring')], default='alchemy', max_length=20, unique=True)),
                ('type_of', models.CharField(default='primary', max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('pvp', 'PvP'), ('wpvp', 'wPvP'), ('bgs', 'BGs'), ('pve', 'PvE'), ('meme', 'MeMe'), ('mc', 'MC'), ('bwl', 'BWL'), ('zg', 'ZG'), ('aq20', 'AQ20'), ('aq40', 'AQ40'), ('naxx', 'Naxx'), ('5man', '5-man'), ('melee', 'Melee'), ('caster', 'Caster'), ('healer', 'Healer'), ('tank', 'Tank'), ('dps', 'DPS'), ('horde', 'Horde'), ('alliance', 'Alliance')], max_length=5, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WoWClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('druid', 'druid'), ('hunter', 'hunter'), ('mage', 'mage'), ('paladin', 'paladin'), ('priest', 'priest'), ('rogue', 'rogue'), ('shaman', 'shaman'), ('warlock', 'warlock'), ('warrior', 'warrior')], default='warrior', max_length=20, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TalentTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('position', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('_architect', models.CharField(default='[]', max_length=100)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('wow_class', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Spec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=30)),
                ('hash', models.CharField(default='testy test', max_length=100)),
                ('description', models.CharField(default='couple line of text...', max_length=1000)),
                ('private', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tags', models.ManyToManyField(related_name='spec_tags_related', related_query_name='spec_tags', to='home.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'abstract': False,
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('creates', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Crafted')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Item')),
            ],
            options={
                'unique_together': {('item', 'creates')},
            },
        ),
        migrations.AddField(
            model_name='crafted',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Item'),
        ),
        migrations.AddField(
            model_name='crafted',
            name='materials',
            field=models.ManyToManyField(to='home.Material'),
        ),
        migrations.AddField(
            model_name='crafted',
            name='prof',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.Profession'),
        ),
        migrations.CreateModel(
            name='ConsumeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=30)),
                ('hash', models.CharField(default='testy test', max_length=100)),
                ('description', models.CharField(default='couple line of text...', max_length=1000)),
                ('private', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('consumes', models.ManyToManyField(to='home.Consume')),
                ('tags', models.ManyToManyField(related_name='consumelist_tags_related', related_query_name='consumelist_tags', to='home.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddField(
            model_name='consume',
            name='consume_list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.ConsumeList'),
        ),
        migrations.AddField(
            model_name='consume',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Crafted'),
        ),
        migrations.CreateModel(
            name='TreeAllotted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invested', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(51)])),
                ('spec', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Spec')),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.TalentTree')),
            ],
            options={
                'unique_together': {('spec', 'tree')},
            },
        ),
        migrations.CreateModel(
            name='Talent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('max_rank', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(5)])),
                ('_description', models.CharField(max_length=400)),
                ('formula', models.CharField(default='[x]', max_length=150)),
                ('x', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('y', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(7)])),
                ('locked', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.Talent')),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.TalentTree')),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'unique_together': {('wow_class', 'name', 'tree')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='consume',
            unique_together={('item', 'consume_list')},
        ),
    ]
