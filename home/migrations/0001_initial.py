# Generated by Django 2.2.3 on 2019-08-08 15:32

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import home.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', home.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Consume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='Crafted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.PositiveSmallIntegerField(default=1)),
                ('end_game', models.BooleanField(default=False)),
                ('skillup', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('profession_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(300)])),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('ix', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name', max_length=100, unique=True)),
                ('quality', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('img', models.CharField(max_length=50)),
                ('ilvl', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(300)])),
                ('_slot', models.PositiveSmallIntegerField(choices=[(1, 'Head'), (2, 'Neck'), (3, 'Shoulder'), (4, 'Shirt'), (5, 'Chest'), (6, 'Belt'), (7, 'Legs'), (8, 'Feet'), (9, 'Wrist'), (10, 'Hands'), (15, 'Back'), (16, 'Main Hand'), (17, 'Off Hand'), (18, 'Ranged'), (20, 'Bag'), (25, 'One-hand'), (24, 'Two-hand'), (26, 'Thrown'), (28, 'Held In Off-Hand'), (27, 'Relic'), (29, 'Projectile')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('_proficiency', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('armor', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('speed', models.DecimalField(decimal_places=2, default=0.0, max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(4.0)])),
                ('unique', models.BooleanField(default=False)),
                ('bop', models.BooleanField(default=False)),
                ('quest_item', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=250)),
                ('requirements', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('val', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('disenchant', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('consume', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('ix', models.PositiveIntegerField(choices=[(1, 'Alchemy'), (2, 'Blacksmithing'), (3, 'Enchanting'), (4, 'Engineering'), (5, 'Herbalism'), (6, 'Leatherworking'), (7, 'Mining'), (8, 'Skinning'), (9, 'Tailoring'), (10, 'Cooking'), (11, 'First Aid'), (12, 'Fishing'), (13, 'Riding')], primary_key=True, serialize=False, unique=True)),
                ('img', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('ix', models.PositiveIntegerField(primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('ix', models.PositiveSmallIntegerField(primary_key=True, serialize=False, unique=True)),
                ('t', models.CharField(max_length=1000)),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('pvp', 'PvP'), ('wpvp', 'wPvP'), ('bgs', 'BGs'), ('pve', 'PvE'), ('meme', 'MeMe'), ('mc', 'MC'), ('bwl', 'BWL'), ('zg', 'ZG'), ('aq20', 'AQ20'), ('aq40', 'AQ40'), ('naxx', 'Naxx'), ('5man', '5-man'), ('melee', 'Melee'), ('caster', 'Caster'), ('healer', 'Healer'), ('tank', 'Tank'), ('dps', 'DPS'), ('horde', 'Horde'), ('alliance', 'Alliance')], max_length=5, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WoWClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Druid', 'Druid'), ('Hunter', 'Hunter'), ('Mage', 'Mage'), ('Paladin', 'Paladin'), ('Priest', 'Priest'), ('Rogue', 'Rogue'), ('Shaman', 'Shaman'), ('Warlock', 'Warlock'), ('Warrior', 'Warrior')], max_length=10, unique=True)),
                ('img', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('ix', models.PositiveSmallIntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('_reaction', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='TalentTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('position', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('_architect', models.CharField(default='[]', max_length=100)),
                ('img', models.CharField(max_length=30)),
                ('background', models.CharField(max_length=30)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('wow_class', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Spec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=30)),
                ('hash', models.CharField(default='testy test', max_length=100)),
                ('description', models.CharField(default='couple line of text...', max_length=1000)),
                ('private', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tags', models.ManyToManyField(related_name='spec_tags_related', related_query_name='spec_tags', to='home.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'abstract': False,
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SetBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pieces', models.PositiveIntegerField(default=2, validators=[django.core.validators.MaxValueValidator(9)])),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Spell')),
            ],
            options={
                'ordering': ['pieces'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(default=1)),
                ('creates', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Crafted')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Item')),
            ],
            options={
                'unique_together': {('item', 'creates')},
            },
        ),
        migrations.CreateModel(
            name='ItemSet',
            fields=[
                ('ix', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('bonuses', models.ManyToManyField(to='home.SetBonus')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='equips',
            field=models.ManyToManyField(related_name='equips', to='home.Spell'),
        ),
        migrations.AddField(
            model_name='item',
            name='itemset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.ItemSet'),
        ),
        migrations.AddField(
            model_name='item',
            name='procs',
            field=models.ManyToManyField(related_name='procs', to='home.Spell'),
        ),
        migrations.AddField(
            model_name='item',
            name='use',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.Spell'),
        ),
        migrations.AddField(
            model_name='crafted',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Item'),
        ),
        migrations.AddField(
            model_name='crafted',
            name='materials',
            field=models.ManyToManyField(to='home.Material'),
        ),
        migrations.AddField(
            model_name='crafted',
            name='profession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Profession'),
        ),
        migrations.CreateModel(
            name='ConsumeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=30)),
                ('hash', models.CharField(default='testy test', max_length=100)),
                ('description', models.CharField(default='couple line of text...', max_length=1000)),
                ('private', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('consumes', models.ManyToManyField(to='home.Consume')),
                ('tags', models.ManyToManyField(related_name='consumelist_tags_related', related_query_name='consumelist_tags', to='home.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddField(
            model_name='consume',
            name='consume_list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.ConsumeList'),
        ),
        migrations.AddField(
            model_name='consume',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Crafted'),
        ),
        migrations.CreateModel(
            name='TreeAllotted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invested', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(51)])),
                ('spec', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Spec')),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.TalentTree')),
            ],
            options={
                'unique_together': {('spec', 'tree')},
            },
        ),
        migrations.CreateModel(
            name='Talent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.CharField(max_length=40)),
                ('name', models.CharField(max_length=40)),
                ('max_rank', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(5)])),
                ('_description', models.CharField(max_length=400)),
                ('formula', models.CharField(default='[x]', max_length=150)),
                ('x', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('y', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(7)])),
                ('locked', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.Talent')),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.TalentTree')),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.WoWClass')),
            ],
            options={
                'unique_together': {('wow_class', 'name', 'tree')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='consume',
            unique_together={('item', 'consume_list')},
        ),
    ]
